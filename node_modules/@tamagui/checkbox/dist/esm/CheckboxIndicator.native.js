import {
  styled,
  useTheme,
  withStaticProperties
} from "@tamagui/core";
import { getFontSize } from "@tamagui/font-size";
import { useGetThemedIcon } from "@tamagui/helpers-tamagui";
import { ThemeableStack } from "@tamagui/stacks";
import * as React from "react";
import {
  CheckboxComponent,
  useCheckboxContext
} from "./Checkbox";
import { CheckboxStyledContext } from "./CheckboxStyledContext";
import { getState, isIndeterminate } from "./utils";
import { jsx } from "react/jsx-runtime";
const INDICATOR_NAME = "CheckboxIndicator", CheckboxIndicatorFrame = styled(ThemeableStack, {
  // use Checkbox for easier themes
  name: INDICATOR_NAME,
  context: CheckboxStyledContext
}), CheckboxIndicator = CheckboxIndicatorFrame.extractable(
  React.forwardRef(
    (props, forwardedRef) => {
      const {
        __scopeCheckbox,
        children: childrenProp,
        forceMount,
        disablePassStyles,
        ...indicatorProps
      } = props;
      process.env.NODE_ENV === "development" && !childrenProp && console.warn(
        "Warning: You created a Checkbox.Indicator without passing an child prop for it to use as an icon."
      );
      const context = useCheckboxContext(INDICATOR_NAME, __scopeCheckbox), styledContext = React.useContext(CheckboxStyledContext), iconSize = (typeof styledContext.size == "number" ? styledContext.size * 0.65 : getFontSize(styledContext.size)) * styledContext.scaleIcon, theme = useTheme(), getThemedIcon = useGetThemedIcon({ size: iconSize, color: theme.color }), children = React.Children.toArray(childrenProp).map((child) => disablePassStyles || !React.isValidElement(child) ? child : getThemedIcon(child));
      return forceMount || isIndeterminate(context.state) || context.state === !0 ? /* @__PURE__ */ jsx(
        CheckboxIndicatorFrame,
        {
          "data-state": getState(context.state),
          "data-disabled": context.disabled ? "" : void 0,
          pointerEvents: "none",
          ...indicatorProps,
          ref: forwardedRef,
          children
        }
      ) : null;
    }
  )
);
CheckboxIndicator.displayName = INDICATOR_NAME;
const Checkbox = withStaticProperties(CheckboxComponent, {
  Indicator: CheckboxIndicator,
  Props: CheckboxStyledContext.Provider
});
export {
  Checkbox
};
//# sourceMappingURL=CheckboxIndicator.js.map
