import {
  composeEventHandlers,
  getVariableValue,
  isWeb,
  styled,
  useComposedRefs,
  useProps
} from "@tamagui/core";
import { createContextScope } from "@tamagui/create-context";
import { registerFocusable } from "@tamagui/focusable";
import { getSize } from "@tamagui/get-token";
import { useLabelContext } from "@tamagui/label";
import { ThemeableStack } from "@tamagui/stacks";
import { useControllableState } from "@tamagui/use-controllable-state";
import * as React from "react";
import { BubbleInput } from "./BubbleInput";
import { CheckboxStyledContext } from "./CheckboxStyledContext";
import { getState, isIndeterminate } from "./isIndeterminate";
import { Fragment, jsx, jsxs } from "react/jsx-runtime";
const CHECKBOX_NAME = "Checkbox", CheckboxFrame = styled(ThemeableStack, {
  name: CHECKBOX_NAME,
  tag: "button",
  context: CheckboxStyledContext,
  variants: {
    unstyled: {
      false: {
        size: "$true",
        backgroundColor: "$background",
        alignItems: "center",
        justifyContent: "center",
        pressTheme: !0,
        focusable: !0,
        borderWidth: 1,
        borderColor: "$borderColor",
        hoverStyle: {
          borderColor: "$borderColorHover"
        },
        focusStyle: {
          borderColor: "$borderColorFocus",
          outlineStyle: "solid",
          outlineWidth: 2,
          outlineColor: "$borderColorFocus"
        }
      }
    },
    disabled: {
      true: {
        pointerEvents: "none",
        userSelect: "none",
        cursor: "not-allowed",
        hoverStyle: {
          borderColor: "$borderColor",
          backgroundColor: "$background"
        },
        pressStyle: {
          borderColor: "$borderColor",
          backgroundColor: "$backgroundColor"
        },
        focusStyle: {
          outlineWidth: 0
        }
      }
    },
    size: {
      "...size": (val, { tokens }) => ({
        borderRadius: getVariableValue(getSize(val)) / 8
      })
    }
  },
  defaultVariants: {
    unstyled: process.env.TAMAGUI_HEADLESS === "1"
  }
}), [createCheckboxContext, createCheckboxScope] = createContextScope(CHECKBOX_NAME), [CheckboxProvider, useCheckboxContext] = createCheckboxContext(CHECKBOX_NAME), CheckboxComponent = CheckboxFrame.styleable(
  function(props, forwardedRef) {
    const {
      __scopeCheckbox,
      labelledBy: ariaLabelledby,
      name,
      checked: checkedProp,
      defaultChecked,
      required,
      scaleSize = 0.45,
      sizeAdjust = 0,
      disabled,
      value = "on",
      onCheckedChange,
      native,
      scaleIcon,
      ...checkboxProps
    } = props, [button, setButton] = React.useState(null), composedRefs = useComposedRefs(forwardedRef, (node) => setButton(node)), hasConsumerStoppedPropagationRef = React.useRef(!1), propsActive = useProps(props), isFormControl = isWeb ? button ? !!button.closest("form") : !0 : !1, [checked = !1, setChecked] = useControllableState({
      prop: checkedProp,
      defaultProp: defaultChecked,
      onChange: onCheckedChange
    }), styledContext = React.useContext(CheckboxStyledContext), adjustedSize = getVariableValue(
      getSize(propsActive.size ?? styledContext?.size ?? "$true", {
        shift: sizeAdjust
      })
    ), size = scaleSize ? Math.round(adjustedSize * scaleSize) : adjustedSize, labelId = useLabelContext(button), labelledBy = ariaLabelledby || labelId;
    return React.useEffect(() => {
      if (props.id && !disabled)
        return registerFocusable(props.id, {
          focusAndSelect: () => {
            setChecked((x) => !x);
          },
          focus: () => {
          }
        });
    }, [props.id, setChecked, disabled]), /* @__PURE__ */ jsx(CheckboxProvider, { scope: __scopeCheckbox, state: checked, disabled, children: isWeb && native ? /* @__PURE__ */ jsx(
      BubbleInput,
      {
        control: button,
        bubbles: !hasConsumerStoppedPropagationRef.current,
        name,
        value,
        checked,
        required,
        disabled,
        id: props.id
      }
    ) : /* @__PURE__ */ jsxs(Fragment, { children: [
      /* @__PURE__ */ jsx(
        CheckboxFrame,
        {
          width: size,
          height: size,
          tag: "button",
          role: "checkbox",
          "aria-labelledby": labelledBy,
          "aria-checked": isIndeterminate(checked) ? "mixed" : checked,
          "aria-required": required,
          "data-state": getState(checked),
          "data-disabled": disabled ? "" : void 0,
          disabled,
          ...checkboxProps,
          ref: composedRefs,
          ...isWeb && {
            type: "button",
            value,
            onKeyDown: composeEventHandlers(
              props.onKeyDown,
              (event) => {
                event.key === "Enter" && event.preventDefault();
              }
            )
          },
          onPress: composeEventHandlers(props.onPress, (event) => {
            setChecked(
              (prevChecked) => isIndeterminate(prevChecked) ? !0 : !prevChecked
            ), isFormControl && (hasConsumerStoppedPropagationRef.current = event.isPropagationStopped(), hasConsumerStoppedPropagationRef.current || event.stopPropagation());
          }),
          children: /* @__PURE__ */ jsx(
            CheckboxStyledContext.Provider,
            {
              size: propsActive.size ?? styledContext?.size ?? "$true",
              scaleIcon: scaleIcon ?? styledContext?.scaleIcon ?? 1,
              children: propsActive.children
            }
          )
        }
      ),
      isWeb && isFormControl ? /* @__PURE__ */ jsx(
        BubbleInput,
        {
          isHidden: !0,
          control: button,
          bubbles: !hasConsumerStoppedPropagationRef.current,
          name,
          value,
          checked,
          required,
          disabled
        }
      ) : null
    ] }) });
  }
);
export {
  CheckboxComponent,
  CheckboxFrame,
  CheckboxProvider,
  createCheckboxScope,
  useCheckboxContext
};
//# sourceMappingURL=ScopedProps.js.map
