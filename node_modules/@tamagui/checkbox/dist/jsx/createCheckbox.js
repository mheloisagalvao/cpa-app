import {
  composeEventHandlers,
  getVariableValue,
  isWeb,
  useComposedRefs,
  useProps,
  useTheme,
  withStaticProperties
} from "@tamagui/core";
import { createContextScope } from "@tamagui/create-context";
import "@tamagui/focusable";
import { getFontSize } from "@tamagui/font-size";
import { getSize } from "@tamagui/get-token";
import { useGetThemedIcon } from "@tamagui/helpers-tamagui";
import { useLabelContext } from "@tamagui/label";
import { useControllableState } from "@tamagui/use-controllable-state";
import React from "react";
import { BubbleInput } from "./BubbleInput";
import { CheckboxStyledContext } from "./CheckboxStyledContext";
import { getState, isIndeterminate } from "./utils";
const CHECKBOX_NAME = "Checkbox", [createCheckboxContext, createCheckboxScope] = createContextScope(CHECKBOX_NAME), [CheckboxProvider, useCheckboxContext] = createCheckboxContext(CHECKBOX_NAME);
function createCheckbox({
  Frame,
  Indicator
}) {
  const CheckboxComponent = function(props, forwardedRef) {
    const {
      __scopeCheckbox,
      labelledBy: ariaLabelledby,
      name,
      checked: checkedProp,
      defaultChecked,
      required,
      scaleSize = 0.45,
      sizeAdjust = 0,
      disabled,
      value = "on",
      onCheckedChange,
      native,
      scaleIcon,
      ...checkboxProps
    } = props, [button, setButton] = React.useState(null), composedRefs = useComposedRefs(forwardedRef, (node) => setButton(node)), hasConsumerStoppedPropagationRef = React.useRef(!1), propsActive = useProps(props), isFormControl = isWeb ? button ? !!button.closest("form") : !0 : !1, [checked = !1, setChecked] = useControllableState({
      prop: checkedProp,
      defaultProp: defaultChecked,
      onChange: onCheckedChange
    }), styledContext = React.useContext(CheckboxStyledContext), adjustedSize = getVariableValue(
      getSize(propsActive.size ?? styledContext?.size ?? "$true", {
        shift: sizeAdjust
      })
    ), size = scaleSize ? Math.round(adjustedSize * scaleSize) : adjustedSize, labelId = useLabelContext(button), labelledBy = ariaLabelledby || labelId;
    return <CheckboxProvider scope={__scopeCheckbox} state={checked} disabled={disabled}>{isWeb && native ? <BubbleInput
      control={button}
      bubbles={!hasConsumerStoppedPropagationRef.current}
      name={name}
      value={value}
      checked={checked}
      required={required}
      disabled={disabled}
      id={props.id}
    /> : <>
      <Frame
        width={size}
        height={size}
        tag="button"
        role="checkbox"
        aria-labelledby={labelledBy}
        aria-checked={isIndeterminate(checked) ? "mixed" : checked}
        aria-required={required}
        data-state={getState(checked)}
        data-disabled={disabled ? "" : void 0}
        disabled={disabled}
        {...checkboxProps}
        ref={composedRefs}
        {...isWeb && {
          type: "button",
          value,
          onKeyDown: composeEventHandlers(
            props.onKeyDown,
            (event) => {
              event.key === "Enter" && event.preventDefault();
            }
          )
        }}
        onPress={composeEventHandlers(props.onPress, (event) => {
          setChecked(
            (prevChecked) => isIndeterminate(prevChecked) ? !0 : !prevChecked
          ), isFormControl && (hasConsumerStoppedPropagationRef.current = event.isPropagationStopped(), hasConsumerStoppedPropagationRef.current || event.stopPropagation());
        })}
      ><CheckboxStyledContext.Provider
        size={propsActive.size ?? styledContext?.size ?? "$true"}
        scaleIcon={scaleIcon ?? styledContext?.scaleIcon ?? 1}
      >{propsActive.children}</CheckboxStyledContext.Provider></Frame>
      {isWeb && isFormControl ? <BubbleInput
        isHidden
        control={button}
        bubbles={!hasConsumerStoppedPropagationRef.current}
        name={name}
        value={value}
        checked={checked}
        required={required}
        disabled={disabled}
      /> : null}
    </>}</CheckboxProvider>;
  }, CheckboxIndicator = React.forwardRef(
    (props, forwardedRef) => {
      const {
        __scopeCheckbox,
        children: childrenProp,
        forceMount,
        disablePassStyles,
        ...indicatorProps
      } = props;
      process.env.NODE_ENV === "development" && !childrenProp && console.warn(
        "Warning: You created a Checkbox.Indicator without passing an child prop for it to use as an icon."
      );
      const context = useCheckboxContext(INDICATOR_NAME, __scopeCheckbox), styledContext = React.useContext(CheckboxStyledContext), iconSize = (typeof styledContext.size == "number" ? styledContext.size * 0.65 : getFontSize(styledContext.size)) * styledContext.scaleIcon, theme = useTheme(), getThemedIcon = useGetThemedIcon({ size: iconSize, color: theme.color }), children = React.Children.toArray(childrenProp).map((child) => disablePassStyles || !React.isValidElement(child) ? child : getThemedIcon(child));
      return forceMount || isIndeterminate(context.state) || context.state === !0 ? <CheckboxIndicatorFrame
        data-state={getState(context.state)}
        data-disabled={context.disabled ? "" : void 0}
        pointerEvents="none"
        {...indicatorProps}
        ref={forwardedRef}
      >{children}</CheckboxIndicatorFrame> : null;
    }
  );
  return withStaticProperties(CheckboxComponent, {
    Indicator: CheckboxIndicator,
    Props: CheckboxStyledContext.Provider
  });
}
export {
  CheckboxProvider,
  createCheckbox,
  createCheckboxScope,
  useCheckboxContext
};
//# sourceMappingURL=createCheckbox.js.map
