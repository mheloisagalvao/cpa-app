var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var createCheckbox_exports = {};
__export(createCheckbox_exports, {
  CheckboxProvider: () => CheckboxProvider,
  createCheckbox: () => createCheckbox,
  createCheckboxScope: () => createCheckboxScope,
  useCheckboxContext: () => useCheckboxContext
});
module.exports = __toCommonJS(createCheckbox_exports);
var import_core = require("@tamagui/core"), import_create_context = require("@tamagui/create-context"), import_focusable = require("@tamagui/focusable"), import_font_size = require("@tamagui/font-size"), import_get_token = require("@tamagui/get-token"), import_helpers_tamagui = require("@tamagui/helpers-tamagui"), import_label = require("@tamagui/label"), import_use_controllable_state = require("@tamagui/use-controllable-state"), import_react = __toESM(require("react")), import_BubbleInput = require("./BubbleInput"), import_CheckboxStyledContext = require("./CheckboxStyledContext"), import_utils = require("./utils"), import_jsx_runtime = require("react/jsx-runtime");
const CHECKBOX_NAME = "Checkbox", [createCheckboxContext, createCheckboxScope] = (0, import_create_context.createContextScope)(CHECKBOX_NAME), [CheckboxProvider, useCheckboxContext] = createCheckboxContext(CHECKBOX_NAME);
function createCheckbox({
  Frame,
  Indicator
}) {
  const CheckboxComponent = function(props, forwardedRef) {
    const {
      __scopeCheckbox,
      labelledBy: ariaLabelledby,
      name,
      checked: checkedProp,
      defaultChecked,
      required,
      scaleSize = 0.45,
      sizeAdjust = 0,
      disabled,
      value = "on",
      onCheckedChange,
      native,
      scaleIcon,
      ...checkboxProps
    } = props, [button, setButton] = import_react.default.useState(null), composedRefs = (0, import_core.useComposedRefs)(forwardedRef, (node) => setButton(node)), hasConsumerStoppedPropagationRef = import_react.default.useRef(!1), propsActive = (0, import_core.useProps)(props), isFormControl = import_core.isWeb ? button ? !!button.closest("form") : !0 : !1, [checked = !1, setChecked] = (0, import_use_controllable_state.useControllableState)({
      prop: checkedProp,
      defaultProp: defaultChecked,
      onChange: onCheckedChange
    }), styledContext = import_react.default.useContext(import_CheckboxStyledContext.CheckboxStyledContext), adjustedSize = (0, import_core.getVariableValue)(
      (0, import_get_token.getSize)(propsActive.size ?? (styledContext == null ? void 0 : styledContext.size) ?? "$true", {
        shift: sizeAdjust
      })
    ), size = scaleSize ? Math.round(adjustedSize * scaleSize) : adjustedSize, labelId = (0, import_label.useLabelContext)(button);
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(CheckboxProvider, { scope: __scopeCheckbox, state: checked, disabled, children: import_core.isWeb && native ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      import_BubbleInput.BubbleInput,
      {
        control: button,
        bubbles: !hasConsumerStoppedPropagationRef.current,
        name,
        value,
        checked,
        required,
        disabled,
        id: props.id
      }
    ) : /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
        Frame,
        {
          width: size,
          height: size,
          tag: "button",
          role: "checkbox",
          "aria-labelledby": ariaLabelledby || labelId,
          "aria-checked": (0, import_utils.isIndeterminate)(checked) ? "mixed" : checked,
          "aria-required": required,
          "data-state": (0, import_utils.getState)(checked),
          "data-disabled": disabled ? "" : void 0,
          disabled,
          ...checkboxProps,
          ref: composedRefs,
          ...import_core.isWeb && {
            type: "button",
            value,
            onKeyDown: (0, import_core.composeEventHandlers)(
              props.onKeyDown,
              (event) => {
                event.key === "Enter" && event.preventDefault();
              }
            )
          },
          onPress: (0, import_core.composeEventHandlers)(props.onPress, (event) => {
            setChecked(
              (prevChecked) => (0, import_utils.isIndeterminate)(prevChecked) ? !0 : !prevChecked
            ), isFormControl && (hasConsumerStoppedPropagationRef.current = event.isPropagationStopped(), hasConsumerStoppedPropagationRef.current || event.stopPropagation());
          }),
          children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
            import_CheckboxStyledContext.CheckboxStyledContext.Provider,
            {
              size: propsActive.size ?? (styledContext == null ? void 0 : styledContext.size) ?? "$true",
              scaleIcon: scaleIcon ?? (styledContext == null ? void 0 : styledContext.scaleIcon) ?? 1,
              children: propsActive.children
            }
          )
        }
      ),
      import_core.isWeb && isFormControl ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
        import_BubbleInput.BubbleInput,
        {
          isHidden: !0,
          control: button,
          bubbles: !hasConsumerStoppedPropagationRef.current,
          name,
          value,
          checked,
          required,
          disabled
        }
      ) : null
    ] }) });
  }, CheckboxIndicator = import_react.default.forwardRef(
    (props, forwardedRef) => {
      const {
        __scopeCheckbox,
        children: childrenProp,
        forceMount,
        disablePassStyles,
        ...indicatorProps
      } = props;
      process.env.NODE_ENV === "development" && !childrenProp && console.warn(
        "Warning: You created a Checkbox.Indicator without passing an child prop for it to use as an icon."
      );
      const context = useCheckboxContext(INDICATOR_NAME, __scopeCheckbox), styledContext = import_react.default.useContext(import_CheckboxStyledContext.CheckboxStyledContext), iconSize = (typeof styledContext.size == "number" ? styledContext.size * 0.65 : (0, import_font_size.getFontSize)(styledContext.size)) * styledContext.scaleIcon, theme = (0, import_core.useTheme)(), getThemedIcon = (0, import_helpers_tamagui.useGetThemedIcon)({ size: iconSize, color: theme.color }), children = import_react.default.Children.toArray(childrenProp).map((child) => disablePassStyles || !import_react.default.isValidElement(child) ? child : getThemedIcon(child));
      return forceMount || (0, import_utils.isIndeterminate)(context.state) || context.state === !0 ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
        CheckboxIndicatorFrame,
        {
          "data-state": (0, import_utils.getState)(context.state),
          "data-disabled": context.disabled ? "" : void 0,
          pointerEvents: "none",
          ...indicatorProps,
          ref: forwardedRef,
          children
        }
      ) : null;
    }
  );
  return (0, import_core.withStaticProperties)(CheckboxComponent, {
    Indicator: CheckboxIndicator,
    Props: import_CheckboxStyledContext.CheckboxStyledContext.Provider
  });
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  CheckboxProvider,
  createCheckbox,
  createCheckboxScope,
  useCheckboxContext
});
//# sourceMappingURL=createCheckbox.js.map
