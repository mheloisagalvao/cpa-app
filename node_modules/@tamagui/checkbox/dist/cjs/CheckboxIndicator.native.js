"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var CheckboxIndicator_exports = {};
__export(CheckboxIndicator_exports, {
  Checkbox: () => Checkbox
});
module.exports = __toCommonJS(CheckboxIndicator_exports);
var import_core = require("@tamagui/core"), import_font_size = require("@tamagui/font-size"), import_helpers_tamagui = require("@tamagui/helpers-tamagui"), import_stacks = require("@tamagui/stacks"), React = __toESM(require("react")), import_Checkbox = require("./Checkbox"), import_CheckboxStyledContext = require("./CheckboxStyledContext"), import_utils = require("./utils"), import_jsx_runtime = require("react/jsx-runtime");
const INDICATOR_NAME = "CheckboxIndicator", CheckboxIndicatorFrame = (0, import_core.styled)(import_stacks.ThemeableStack, {
  // use Checkbox for easier themes
  name: INDICATOR_NAME,
  context: import_CheckboxStyledContext.CheckboxStyledContext
}), CheckboxIndicator = CheckboxIndicatorFrame.extractable(
  React.forwardRef(
    (props, forwardedRef) => {
      const {
        __scopeCheckbox,
        children: childrenProp,
        forceMount,
        disablePassStyles,
        ...indicatorProps
      } = props;
      process.env.NODE_ENV === "development" && !childrenProp && console.warn(
        "Warning: You created a Checkbox.Indicator without passing an child prop for it to use as an icon."
      );
      const context = (0, import_Checkbox.useCheckboxContext)(INDICATOR_NAME, __scopeCheckbox), styledContext = React.useContext(import_CheckboxStyledContext.CheckboxStyledContext), iconSize = (typeof styledContext.size == "number" ? styledContext.size * 0.65 : (0, import_font_size.getFontSize)(styledContext.size)) * styledContext.scaleIcon, theme = (0, import_core.useTheme)(), getThemedIcon = (0, import_helpers_tamagui.useGetThemedIcon)({ size: iconSize, color: theme.color }), children = React.Children.toArray(childrenProp).map((child) => disablePassStyles || !React.isValidElement(child) ? child : getThemedIcon(child));
      return forceMount || (0, import_utils.isIndeterminate)(context.state) || context.state === !0 ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
        CheckboxIndicatorFrame,
        {
          "data-state": (0, import_utils.getState)(context.state),
          "data-disabled": context.disabled ? "" : void 0,
          pointerEvents: "none",
          ...indicatorProps,
          ref: forwardedRef,
          children
        }
      ) : null;
    }
  )
);
CheckboxIndicator.displayName = INDICATOR_NAME;
const Checkbox = (0, import_core.withStaticProperties)(import_Checkbox.CheckboxComponent, {
  Indicator: CheckboxIndicator,
  Props: import_CheckboxStyledContext.CheckboxStyledContext.Provider
});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Checkbox
});
//# sourceMappingURL=CheckboxIndicator.js.map
